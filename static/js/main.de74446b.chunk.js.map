{"version":3,"sources":["assets/icons/logo.svg","assets/icons/calendar.svg","assets/icons/favorite_outline.svg","assets/icons/favorite_fill.svg","assets/icons/left.svg","assets/icons/right.svg","assets/icons/face.svg","assets/icons/settings_white.svg","assets/icons/history.svg","assets/icons/list.svg","components/Container/Container.jsx","components/Header/Header.jsx","components/Button/Button.jsx","components/Input/Input.jsx","components/SearchSection/SearchSection.jsx","state/api.js","state/actionCreators.js","state/actionTypes.js","state/thunks.js","state/selectors.js","components/SearchSection/SearchSectionContainer.jsx","components/ItemCard/ItemCard.jsx","components/SliderSection/SliderSection.jsx","components/SliderSection/SliderSectionContainer.jsx","components/ProfileListItem/ProfileListItem.jsx","components/ProfileSection/ProfileSection.jsx","components/ProfileSection/ProfileSectionContainer.jsx","App.js","state/reducer.js","state/store.js","serviceWorker.js","index.js"],"names":["module","exports","Container","children","className","Header","icon","title","nav","useRef","burger","closeleMenu","current","classList","remove","to","onClick","src","alt","ref","exact","activeClassName","toggle","Button","id","Input","value","type","onChange","SearchSection","list","setResultListThunk","useState","localTitle","setLocalTitle","localType","setLocalType","e","target","defaultValue","instance","Axios","create","baseURL","storage","window","localStorage","API","page","get","then","response","data","Promise","resolve","reject","setItem","JSON","stringify","parse","getItem","setSearchTitle","setSearchType","category","setSearchPage","setResultList","setProfileName","name","setFavoriteList","favorite","deleteFavoriteItem","imdbID","setHistoryList","history","addHistoryItem","setHistory","dispatch","Response","Search","alert","Error","catch","err","getSearchTitle","state","search","getSearchType","getSearchPage","getResultList","result","getProfileName","profile","getProfileFavorite","getProfileHistory","connect","ItemCard","poster","year","isLiked","addFavoriteItem","logo","tabIndex","timeIcon","toggleFunction","favoriteFillIcon","favoriteOutlineIcon","SliderSection","addResultListThunk","slider","loading","setLoading","buttonFunction","sliderBlock","scrollSize","clientWidth","currentTarget","getAttribute","scrollBy","left","top","behavior","useEffect","scrollTo","right","onScroll","scrollWidth","scrollLeft","setTimeout","map","item","Title","Poster","Year","find","profileItem","key","ProfileListItem","onSearch","onDelete","isHistory","isFavorite","ProfileSection","setProfileNameThunk","clearHistoryListThunk","clearFavoriteListThunk","settingsModal","historyModal","listModal","inputValue","setInputValue","historyHook","useHistory","push","toggleModal","contains","closest","avatar","settingsIcon","historyIcon","listIcon","length","index","getProfileNameThunk","console","log","getFavoriteListThunk","setFavoriteListThunk","getHistoryListThunk","setHistoryListThunk","path","SearchSectionContainer","SliderSectionContainer","ProfileSectionContainer","initialState","store","createStore","action","filter","applyMiddleware","thunk","Boolean","location","hostname","match","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.de74446b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1ae09dda.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendar.17b75e4d.svg\";","module.exports = __webpack_public_path__ + \"static/media/favorite_outline.bd6008c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/favorite_fill.e246b4e3.svg\";","module.exports = __webpack_public_path__ + \"static/media/left.1caaef75.svg\";","module.exports = __webpack_public_path__ + \"static/media/right.9a9e9d18.svg\";","module.exports = __webpack_public_path__ + \"static/media/face.9f965a85.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings_white.5b0cc761.svg\";","module.exports = __webpack_public_path__ + \"static/media/history.dd742d74.svg\";","module.exports = __webpack_public_path__ + \"static/media/list.654fd082.svg\";","import React from 'react'\r\nimport './Container.scss'\r\n\r\nconst Container = ({ children }) => {\r\n    return (\r\n        <div className='container'>{children}</div>\r\n    )\r\n}\r\n\r\nexport default Container","import React, { useRef } from 'react'\r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport Container from '../Container/Container'\r\nimport './Header.scss'\r\n\r\nconst Header = ({ icon, title }) => {\r\n\r\n    const nav = useRef(null)\r\n    const burger = useRef(null)\r\n\r\n    const toggleMenu = () => {\r\n        burger.current.classList.toggle('header__burger_open')\r\n        nav.current.classList.toggle('header__nav_open')\r\n    }\r\n\r\n    const closeleMenu = () => {\r\n        burger.current.classList.remove('header__burger_open')\r\n        nav.current.classList.remove('header__nav_open')\r\n    }\r\n\r\n    return (\r\n        <header className='header'>\r\n            <Container>\r\n                <Link to='/' className='button button_large header__main' onClick={closeleMenu}>\r\n                    <img src={icon} alt='logo' />\r\n                    <span>{title}</span>\r\n                </Link>\r\n                <nav className='header__nav' ref={nav}>\r\n                    <NavLink exact to='/' className='button' activeClassName='button_selected' onClick={closeleMenu}>\r\n                        Search\r\n                    </NavLink>\r\n                    <NavLink to='/profile' className='button' activeClassName='button_selected' onClick={closeleMenu}>\r\n                        Profile\r\n                    </NavLink>\r\n                </nav>\r\n                <span className='header__burger' ref={burger} onClick={toggleMenu} />\r\n            </Container>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport './Button.scss'\r\n\r\nconst Button = ({ className, id, children, onClick }) => {\r\n    return (\r\n        <button className={`button ${className ? className : ''}`} onClick={onClick} id={id}>{children}</button>\r\n    )\r\n}\r\n\r\nexport default Button","import React from 'react'\r\nimport './Input.scss'\r\n\r\nconst Input = ({ value, type, onChange }) => {\r\n    return (\r\n        <input className='input' type={type} value={value} onChange={onChange} />\r\n    )\r\n}\r\n\r\nexport default Input","import React, { useState } from 'react'\r\nimport Container from '../Container/Container';\r\nimport Button from '../Button/Button'\r\nimport Input from '../Input/Input'\r\nimport './SearchSection.scss'\r\n\r\nconst SearchSection = ({ title, type, list, setResultListThunk }) => {\r\n\r\n    const [localTitle, setLocalTitle] = useState(title)\r\n    const [localType, setLocalType] = useState(type)\r\n\r\n    const onGetList = () => {\r\n        if (localTitle !== title || localType !== type) {\r\n            setResultListThunk(localTitle, localType)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section className='search'>\r\n            <Container>\r\n                <div className={`search__block ${!list ? 'search__block_middle' : ''}`}>\r\n                    <Input value={localTitle} type='search' onChange={e => setLocalTitle(e.target.value)} />\r\n                    <select className='select' defaultValue={localType} onChange={e => setLocalType(e.target.value)}>\r\n                        <option value='movie'>Movie</option>\r\n                        <option value='series'>Series</option>\r\n                    </select>\r\n                    <Button onClick={onGetList}>Search</Button>\r\n                </div>\r\n            </Container>\r\n        </section >\r\n    )\r\n}\r\n\r\nexport default SearchSection","import Axios from \"axios\"\r\n\r\nconst key = 'dfdae3d4'\r\n\r\nconst instance = Axios.create({\r\n    baseURL: `https://www.omdbapi.com/`\r\n})\r\n\r\nconst storage = window.localStorage\r\n\r\nexport const API = {\r\n    getResultList(title, type, page) {\r\n        return instance.get(`?apikey=${key}&s=${title}&type=${type}&page=${page}`)\r\n            .then(response => response.data)\r\n    },\r\n\r\n    setLocalData(type, list) {\r\n        return new Promise(function (resolve, reject) {\r\n            storage.setItem(type, JSON.stringify(list))\r\n            resolve(list)\r\n        })\r\n    },\r\n\r\n    getLocalData(type) {\r\n        return new Promise(function (resolve, reject) {\r\n            resolve(JSON.parse(storage.getItem(type)))\r\n        })\r\n    }\r\n}","import {\r\n    SET_SEARCH_TITLE, SET_SEARCH_TYPE, SET_SEARCH_PAGE,\r\n    SET_RESULT_LIST, ADD_RESULT_LIST,\r\n    SET_PROFILE_NAME,\r\n    SET_FAVORITE_LIST, ADD_FAVORITE_ITEM, DELETE_FAVORITE_ITEM,\r\n    SET_HISTORY_LIST, ADD_HISTORY_ITEM\r\n} from './actionTypes'\r\n\r\nexport const setSearchTitle = (title) => ({ type: SET_SEARCH_TITLE, title })\r\nexport const setSearchType = (category) => ({ type: SET_SEARCH_TYPE, category })\r\nexport const setSearchPage = (page) => ({ type: SET_SEARCH_PAGE, page })\r\nexport const setResultList = (list) => ({ type: SET_RESULT_LIST, list })\r\nexport const addResultList = (list) => ({ type: ADD_RESULT_LIST, list })\r\nexport const setProfileName = (name) => ({ type: SET_PROFILE_NAME, name })\r\nexport const setFavoriteList = (favorite) => ({ type: SET_FAVORITE_LIST, favorite })\r\nexport const addFavoriteItem = (favorite) => ({ type: ADD_FAVORITE_ITEM, favorite })\r\nexport const deleteFavoriteItem = (imdbID) => ({ type: DELETE_FAVORITE_ITEM, imdbID })\r\nexport const setHistoryList = (history) => ({ type: SET_HISTORY_LIST, history })\r\nexport const addHistoryItem = (history) => ({ type: ADD_HISTORY_ITEM, history })","export const SET_SEARCH_TITLE = 'SET_SEARCH_TITLE'\r\nexport const SET_SEARCH_TYPE = 'SET_SEARCH_TYPE'\r\nexport const SET_SEARCH_PAGE = 'SET_SEARCH_PAGE'\r\nexport const SET_RESULT_LIST = 'SET_RESULT_LIST'\r\nexport const ADD_RESULT_LIST = 'ADD_RESULT_LIST'\r\nexport const SET_PROFILE_NAME = 'SET_PROFILE_NAME'\r\nexport const SET_FAVORITE_LIST = 'SET_FAVORITE_LIST'\r\nexport const ADD_FAVORITE_ITEM = 'ADD_FAVORITE_ITEM'\r\nexport const DELETE_FAVORITE_ITEM = 'DELETE_FAVORITE_ITEM'\r\nexport const SET_HISTORY_LIST = 'SET_HISTORY_LIST'\r\nexport const ADD_HISTORY_ITEM = 'ADD_HISTORY_ITEM'","import { API } from \"./api\"\r\nimport {\r\n    setSearchTitle, setSearchType, setSearchPage,\r\n    setResultList, addResultList,\r\n    setProfileName,\r\n    setFavoriteList,\r\n    setHistoryList, addHistoryItem\r\n} from \"./actionCreators\"\r\n\r\nexport const setResultListThunk = (title, type, page = 1, setHistory = true) => (dispatch) => {\r\n    if (!title) return\r\n    API.getResultList(title, type, page)\r\n        .then(data => {\r\n            if (data.Response === 'False') {\r\n                alert(data.Error)\r\n                return\r\n            }\r\n            dispatch(setSearchTitle(title))\r\n            dispatch(setSearchType(type))\r\n            dispatch(setSearchPage(page))\r\n            dispatch(setResultList(data.Search))\r\n            if (setHistory) {\r\n                dispatch(addHistoryItem({ title, type }))\r\n            }\r\n        })\r\n        .catch(err => alert('thunks error:', err))\r\n}\r\n\r\nexport const addResultListThunk = (title, type, page) => (dispatch) => {\r\n    API.getResultList(title, type, page)\r\n        .then(data => {\r\n            if (data.Response === 'False') {\r\n                alert(data.Error)\r\n                return\r\n            }\r\n            dispatch(addResultList(data.Search))\r\n        })\r\n        .catch(err => alert('thunks error:', err))\r\n}\r\n\r\nexport const setProfileNameThunk = (name) => (dispatch) => {\r\n    API.setLocalData('name', name)\r\n        .then(data => dispatch(setProfileName(data)))\r\n        .catch(err => alert('thunks error:', err))\r\n}\r\n\r\nexport const getProfileNameThunk = () => (dispatch) => {\r\n    API.getLocalData('name')\r\n        .then(data => {\r\n            if (!data) data = 'User'\r\n            dispatch(setProfileName(data))\r\n        })\r\n        .catch(err => console.log('thunks error:', err))\r\n}\r\n\r\nexport const setFavoriteListThunk = (list) => (dispatch) => {\r\n    API.setLocalData('favorite', list)\r\n        .catch(err => alert('thunks error:', err))\r\n}\r\n\r\nexport const getFavoriteListThunk = () => (dispatch) => {\r\n    API.getLocalData('favorite')\r\n        .then(data => {\r\n            if (data) dispatch(setFavoriteList(data))\r\n        })\r\n        .catch(err => alert('thunks error:', err))\r\n}\r\n\r\nexport const clearFavoriteListThunk = () => (dispatch) => {\r\n    API.setLocalData('favorite', '')\r\n        .then(data => dispatch(setFavoriteList(data)))\r\n        .catch(err => alert('thunks error:', err))\r\n}\r\n\r\nexport const setHistoryListThunk = (history) => (dispatch) => {\r\n    API.setLocalData('history', history)\r\n        .catch(err => alert('thunks error:', err))\r\n}\r\n\r\nexport const getHistoryListThunk = () => (dispatch) => {\r\n    API.getLocalData('history')\r\n        .then(data => {\r\n            if (data) dispatch(setHistoryList(data))\r\n        })\r\n        .catch(err => alert('thunks error:', err))\r\n}\r\n\r\nexport const clearHistoryListThunk = () => (dispatch) => {\r\n    API.setLocalData('history', '')\r\n        .then(data => dispatch(setHistoryList(data)))\r\n        .catch(err => alert('thunks error:', err))\r\n}","export const getSearchTitle = (state) => state.search.title\r\nexport const getSearchType = (state) => state.search.type\r\nexport const getSearchPage = (state) => state.search.page\r\nexport const getResultList = (state) => state.result.list\r\nexport const getProfileName = (state) => state.profile.name\r\nexport const getProfileFavorite = (state) => state.profile.favorite\r\nexport const getProfileHistory = (state) => state.profile.history","import { connect } from 'react-redux'\r\nimport SearchSection from './SearchSection'\r\nimport { setResultListThunk } from '../../state/thunks'\r\nimport { getSearchTitle, getSearchType, getSearchPage, getResultList } from '../../state/selectors'\r\n\r\nconst mapStateToProps = (state) => ({\r\n    title: getSearchTitle(state),\r\n    type: getSearchType(state),\r\n    page: getSearchPage(state),\r\n    list: getResultList(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, { setResultListThunk })(SearchSection)","import React from 'react'\r\nimport Button from '../Button/Button'\r\nimport timeIcon from '../../assets/icons/calendar.svg'\r\nimport favoriteOutlineIcon from '../../assets/icons/favorite_outline.svg'\r\nimport favoriteFillIcon from '../../assets/icons/favorite_fill.svg'\r\nimport logo from '../../assets/icons/logo.svg'\r\nimport './ItemCard.scss'\r\n\r\nconst ItemCard = ({ title, poster, year, imdbID, isLiked, addFavoriteItem, deleteFavoriteItem }) => {\r\n\r\n    const toggleFunction = (isLiked) => {\r\n        if (!isLiked) {\r\n            addFavoriteItem({ title, year, poster, imdbID })\r\n        } else {\r\n            deleteFavoriteItem(imdbID)\r\n        }\r\n    }\r\n\r\n    if (poster === 'N/A') poster = logo\r\n\r\n    return (\r\n        <div className='card' tabIndex='0'>\r\n            <img src={poster} alt={title} className='card__poster' />\r\n            <div className='card__field'>\r\n                <h2 className='card__title'>{title}</h2>\r\n                <span className='card__year'><img src={timeIcon} alt='runtime' className='card__icon' />{year}</span>\r\n            </div>\r\n            <Button className='button_medium' onClick={e => toggleFunction(isLiked)}>\r\n                <img src={isLiked ? favoriteFillIcon : favoriteOutlineIcon} alt='icon' />\r\n                <span>{!isLiked ? 'Like it!' : 'Liked'}</span>\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ItemCard","import React, { useEffect, useRef, useState } from 'react'\r\nimport Container from '../Container/Container'\r\nimport Button from '../Button/Button'\r\nimport ItemCard from '../ItemCard/ItemCard'\r\nimport left from '../../assets/icons/left.svg'\r\nimport right from '../../assets/icons/right.svg'\r\nimport './SliderSection.scss'\r\n\r\nconst SliderSection = ({ title, type, page, list, favorite, addResultListThunk, setSearchPage, addFavoriteItem, deleteFavoriteItem }) => {\r\n\r\n    const slider = useRef(null)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const buttonFunction = (e) => {\r\n        const sliderBlock = slider.current\r\n        let scrollSize = sliderBlock.clientWidth\r\n        if (e.currentTarget.getAttribute('id') === 'prev') scrollSize = -scrollSize\r\n        sliderBlock.scrollBy({ left: scrollSize, top: 0, behavior: \"smooth\" })\r\n    }\r\n\r\n    const scrollFunction = (e) => {\r\n        if (slider.current.scrollWidth - (slider.current.scrollLeft + slider.current.clientWidth) < slider.current.clientWidth && !loading) {\r\n            setLoading(true)\r\n            setSearchPage(page + 1)\r\n            addResultListThunk(title, type, page + 1)\r\n            setTimeout(() => setLoading(false), 3000)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const sliderBlock = slider.current\r\n        sliderBlock.scrollTo({ left: 0, top: 0, behavior: \"smooth\" })\r\n    }, [title, type])\r\n\r\n    return (\r\n        <section className={`slider ${!list ? 'slider_hidden' : ''}`}>\r\n            <Container>\r\n                <div className='slider__block'>\r\n                    <div className='slider__navigation'>\r\n                        <Button className='slider__button' id='prev' onClick={buttonFunction}>\r\n                            <img className='header__icon' src={left} alt='logo' />\r\n                            <span className='header__title'>Prev</span>\r\n                        </Button>\r\n                        <Button className='slider__button' id='next' onClick={buttonFunction}>\r\n                            <span className='header__title'>Next</span>\r\n                            <img className='header__icon' src={right} alt='logo' />\r\n                        </Button>\r\n                    </div>\r\n                    <div className=\"slider__carousel\" ref={slider} onScroll={scrollFunction}>\r\n                        {list && list.map(item => (\r\n                            <ItemCard\r\n                                title={item.Title}\r\n                                poster={item.Poster}\r\n                                year={item.Year}\r\n                                imdbID={item.imdbID}\r\n                                isLiked={favorite && favorite.find(profileItem => profileItem.imdbID === item.imdbID)}\r\n                                addFavoriteItem={addFavoriteItem}\r\n                                deleteFavoriteItem={deleteFavoriteItem}\r\n                                key={`${item.Title}-${item.Year}`} />\r\n                        )\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default SliderSection","import { connect } from 'react-redux'\r\nimport SliderSection from './SliderSection'\r\nimport { addResultListThunk } from '../../state/thunks'\r\nimport { setSearchPage, addFavoriteItem, deleteFavoriteItem } from '../../state/actionCreators'\r\nimport { getSearchTitle, getSearchType, getSearchPage, getResultList, getProfileFavorite } from '../../state/selectors'\r\n\r\nconst mapStateToProps = (state) => ({\r\n    title: getSearchTitle(state),\r\n    type: getSearchType(state),\r\n    page: getSearchPage(state),\r\n    list: getResultList(state),\r\n    favorite: getProfileFavorite(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, { addResultListThunk, setSearchPage, addFavoriteItem, deleteFavoriteItem })(SliderSection)","import React from 'react'\r\nimport Button from '../Button/Button'\r\nimport './ProfileListItem.scss'\r\n\r\nconst ProfileListItem = ({ title, type, poster, imdbID, onSearch, onDelete, isHistory, isFavorite }) => {\r\n    return (\r\n        <li className='list-item'>\r\n            {isFavorite && <img src={poster} alt='poster' className='list-item__poster' />}\r\n            <span className='list-item__title'>{title}{type && ` (${type})`}</span>\r\n            {isHistory && <Button className='button_outlined' onClick={e => onSearch(title, type, 1, false)}>Search</Button>}\r\n            {isFavorite && <Button className='button_outlined' onClick={e => onDelete(imdbID)}>Delete</Button>}\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ProfileListItem","import React, { useRef, useState, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Container from '../Container/Container'\r\nimport Button from '../Button/Button'\r\nimport Input from '../Input/Input'\r\nimport ProfileListItem from '../ProfileListItem/ProfileListItem'\r\nimport avatar from '../../assets/icons/face.svg'\r\nimport settingsIcon from '../../assets/icons/settings_white.svg'\r\nimport historyIcon from '../../assets/icons/history.svg'\r\nimport listIcon from '../../assets/icons/list.svg'\r\nimport './ProfileSection.scss'\r\n\r\nconst ProfileSection = ({ name, history, favorite, setProfileNameThunk, clearHistoryListThunk, clearFavoriteListThunk, setResultListThunk, deleteFavoriteItem }) => {\r\n\r\n    const settingsModal = useRef(null)\r\n    const historyModal = useRef(null)\r\n    const listModal = useRef(null)\r\n    const [inputValue, setInputValue] = useState(name)\r\n\r\n    let historyHook = useHistory()\r\n\r\n    useEffect(() => {\r\n        setInputValue(name)\r\n    }, [name])\r\n\r\n    const onSearch = (title, type, page, setHistory) => {\r\n        setResultListThunk(title, type, page, setHistory)\r\n        historyHook.push('/')\r\n    }\r\n\r\n    const toggleModal = (e) => {\r\n        if (e.target.classList.contains('settings') || e.target.closest('#settings-button')) settingsModal.current.classList.toggle('modal_open')\r\n        if (e.target.classList.contains('history') || e.target.closest('#history-button')) historyModal.current.classList.toggle('modal_open')\r\n        if (e.target.classList.contains('list') || e.target.closest('#list-button')) listModal.current.classList.toggle('modal_open')\r\n        if (e.target.closest('#settings-button-close')) settingsModal.current.classList.remove('modal_open')\r\n        if (e.target.closest('#history-button-close')) historyModal.current.classList.remove('modal_open')\r\n        if (e.target.closest('#list-button-close')) listModal.current.classList.remove('modal_open')\r\n    }\r\n\r\n    return (\r\n        <section className='profile'>\r\n            <Container>\r\n                <div className='profile__block'>\r\n                    <div className='userinfo'>\r\n                        <img alt='avatar' src={avatar} className='userinfo__avatar' />\r\n                        <h1 className='userinfo__username'>{name}</h1>\r\n                        <Button className='button_medium' id='settings-button' onClick={toggleModal}>\r\n                            <img src={settingsIcon} alt='icon' />\r\n                            <span>Settings</span>\r\n                        </Button>\r\n                        <Button className='button_medium' id='history-button' onClick={toggleModal}>\r\n                            <img src={historyIcon} alt='icon' />\r\n                            <span>History</span>\r\n                        </Button>\r\n                        <Button className='button_medium' id='list-button' onClick={toggleModal}>\r\n                            <img src={listIcon} alt='icon' />\r\n                            <span>My list</span>\r\n                        </Button>\r\n                    </div>\r\n                    <div className='modal settings' ref={settingsModal} onClick={toggleModal}>\r\n                        <div className='modal__content'>\r\n                            <span className='modal__info'>\r\n                                Username:\r\n                            </span>\r\n                            <div className='modal__panel'>\r\n                                <Input type='text' value={inputValue} onChange={e => setInputValue(e.target.value)} />\r\n                                <Button className='button_outlined' onClick={e => setProfileNameThunk(inputValue)}>Save</Button>\r\n                            </div>\r\n                            <div className='modal__panel'>\r\n                                <Button className='button_outlined' onClick={e => clearHistoryListThunk()}>Clear history</Button>\r\n                                <Button className='button_outlined' onClick={e => clearFavoriteListThunk()}>Clear list</Button>\r\n                            </div>\r\n                            <div className='modal__panel'>\r\n                                <Button id='settings-button-close' onClick={toggleModal}>Okay</Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='modal history' ref={historyModal} onClick={toggleModal}>\r\n                        <div className='modal__content'>\r\n                            <span className='modal__info'>\r\n                                Your history:\r\n                            </span>\r\n                            <ul className='modal__list'>\r\n                                {history && history.length ? history.map((item, index) => <ProfileListItem key={`${item.title}(${index})`} title={item.title} type={item.type} onSearch={onSearch} isHistory />) : 'Your history is empty'}\r\n                            </ul>\r\n                            <div className='modal__panel'>\r\n                                <Button id='history-button-close' onClick={toggleModal}>Okay</Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='modal list' ref={listModal} onClick={toggleModal}>\r\n                        <div className='modal__content'>\r\n                            <span className='modal__info'>\r\n                                Your list:\r\n                            </span>\r\n                            <ul className='modal__list'>\r\n                                {favorite && favorite.length ? favorite.map((item, index) => <ProfileListItem key={`${item.title}(${index})`} title={item.title} poster={item.poster} imdbID={item.imdbID} onDelete={deleteFavoriteItem} isFavorite />) : 'Your list is empty'}\r\n                            </ul>\r\n                            <div className='modal__panel'>\r\n                                <Button id='list-button-close' onClick={toggleModal}>Okay</Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ProfileSection","import { connect } from 'react-redux'\r\nimport ProfileSection from './ProfileSection'\r\nimport { setProfileNameThunk, clearHistoryListThunk, clearFavoriteListThunk, setResultListThunk } from '../../state/thunks'\r\nimport { deleteFavoriteItem } from '../../state/actionCreators'\r\nimport { getProfileName, getProfileFavorite, getProfileHistory } from '../../state/selectors'\r\n\r\nconst mapStateToProps = (state) => ({\r\n    name: getProfileName(state),\r\n    favorite: getProfileFavorite(state),\r\n    history: getProfileHistory(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, { setProfileNameThunk, clearHistoryListThunk, clearFavoriteListThunk, setResultListThunk, deleteFavoriteItem })(ProfileSection)","import React, { useEffect } from 'react'\r\nimport { Route } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport Header from './components/Header/Header'\r\nimport SearchSectionContainer from './components/SearchSection/SearchSectionContainer'\r\nimport SliderSectionContainer from './components/SliderSection/SliderSectionContainer'\r\nimport ProfileSectionContainer from './components/ProfileSection/ProfileSectionContainer'\r\nimport { getProfileNameThunk, getFavoriteListThunk, getHistoryListThunk, setFavoriteListThunk, setHistoryListThunk } from './state/thunks'\r\nimport { getProfileName, getProfileFavorite, getProfileHistory } from './state/selectors'\r\nimport logo from './assets/icons/logo.svg'\r\n\r\nfunction App({ favorite, history, getProfileNameThunk, getFavoriteListThunk, setFavoriteListThunk, getHistoryListThunk, setHistoryListThunk }) {\r\n\r\n  useEffect(() => {\r\n    getProfileNameThunk()\r\n    getFavoriteListThunk()\r\n    getHistoryListThunk()\r\n  }, [getProfileNameThunk, getFavoriteListThunk, getHistoryListThunk])\r\n\r\n  useEffect(() => {\r\n    if (favorite) setFavoriteListThunk(favorite)\r\n  }, [favorite, setFavoriteListThunk])\r\n\r\n  useEffect(() => {\r\n    if (history) setHistoryListThunk(history)\r\n  }, [history, setHistoryListThunk])\r\n\r\n  return (\r\n    <>\r\n      <Header icon={logo} title='Movie App' />\r\n      <Route exact path='/'>\r\n        <SearchSectionContainer />\r\n        <SliderSectionContainer />\r\n      </Route>\r\n      <Route path='/profile'>\r\n        <ProfileSectionContainer />\r\n      </Route>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  name: getProfileName(state),\r\n  favorite: getProfileFavorite(state),\r\n  history: getProfileHistory(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, { getProfileNameThunk, getFavoriteListThunk, setFavoriteListThunk, getHistoryListThunk, setHistoryListThunk })(App);","import {\r\n    SET_SEARCH_TITLE, SET_SEARCH_TYPE, SET_SEARCH_PAGE,\r\n    SET_RESULT_LIST, ADD_RESULT_LIST,\r\n    SET_PROFILE_NAME,\r\n    SET_FAVORITE_LIST, ADD_FAVORITE_ITEM, DELETE_FAVORITE_ITEM,\r\n    SET_HISTORY_LIST, ADD_HISTORY_ITEM\r\n} from './actionTypes'\r\n\r\nconst initialState = {\r\n    search: {\r\n        title: '',\r\n        type: 'movie',\r\n        page: 1,\r\n    },\r\n    result: {\r\n        list: null\r\n    },\r\n    profile: {\r\n        name: 'User',\r\n        favorite: [],\r\n        history: []\r\n    }\r\n}\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_SEARCH_TITLE:\r\n            return {\r\n                ...state,\r\n                search: {\r\n                    ...state.search,\r\n                    title: action.title\r\n                }\r\n            }\r\n\r\n        case SET_SEARCH_TYPE:\r\n            return {\r\n                ...state,\r\n                search: {\r\n                    ...state.search,\r\n                    type: action.category\r\n                }\r\n            }\r\n\r\n\r\n        case SET_SEARCH_PAGE:\r\n            return {\r\n                ...state,\r\n                search: {\r\n                    ...state.search,\r\n                    page: action.page\r\n                }\r\n            }\r\n\r\n        case SET_RESULT_LIST:\r\n            return {\r\n                ...state,\r\n                result: {\r\n                    ...state.result,\r\n                    list: action.list\r\n                }\r\n            }\r\n\r\n        case ADD_RESULT_LIST:\r\n            return {\r\n                ...state,\r\n                result: {\r\n                    ...state.result,\r\n                    list: [...state.result.list, ...action.list]\r\n                }\r\n            }\r\n\r\n        case SET_PROFILE_NAME:\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    name: action.name\r\n                }\r\n            }\r\n\r\n        case SET_FAVORITE_LIST:\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    favorite: action.favorite\r\n                }\r\n            }\r\n\r\n        case ADD_FAVORITE_ITEM:\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    favorite: [...state.profile.favorite, action.favorite]\r\n                }\r\n            }\r\n\r\n        case DELETE_FAVORITE_ITEM:\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    favorite: [...state.profile.favorite.filter(item => item.imdbID !== action.imdbID)]\r\n                }\r\n            }\r\n\r\n        case SET_HISTORY_LIST:\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    history: action.history\r\n                }\r\n            }\r\n\r\n        case ADD_HISTORY_ITEM:\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    history: [...state.profile.history, action.history]\r\n                }\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { appReducer } from './reducer'\r\n\r\nexport const store = createStore(appReducer, applyMiddleware(thunk))\r\nwindow.store = store","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport { store } from './state/store'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.scss';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter basename='/movie-app'>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
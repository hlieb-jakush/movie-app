{"version":3,"sources":["assets/icons/logo.svg","assets/icons/calendar.svg","assets/icons/favorite_outline.svg","assets/icons/favorite_fill.svg","assets/icons/left.svg","assets/icons/right.svg","assets/icons/face.svg","assets/icons/settings_white.svg","assets/icons/history.svg","assets/icons/list.svg","components/Container/Container.jsx","components/Header/Header.jsx","state/actionCreators.js","state/actionTypes.js","components/Button/Button.jsx","components/Input/Input.jsx","components/SearchSection/SearchSection.jsx","state/api.js","state/thunks.js","components/SearchSection/SearchSectionContainer.jsx","components/ItemCard/ItemCard.jsx","components/SliderSection/SliderSection.jsx","components/SliderSection/SliderSectionContainer.jsx","components/ProfileListItem/ProfileListItem.jsx","components/ProfileSection/ProfileSection.jsx","components/ProfileSection/ProfileSectionContainer.jsx","App.js","state/reducer.js","state/store.js","serviceWorker.js","index.js"],"names":["module","exports","Container","children","className","Header","icon","title","nav","useRef","burger","closeleMenu","current","classList","remove","to","onClick","src","alt","ref","exact","activeClassName","toggle","setTitle","type","setType","searchType","setPage","page","setList","list","setProfileNameAC","name","setProfileListAC","deleteProfileListAC","imdbID","setProfileHistoryAC","history","addProfileHistoryAC","Button","id","Input","value","onChange","e","target","SearchSection","getList","useState","localTitle","setLocalTitle","localType","setLocalType","defaultValue","instance","Axios","create","baseURL","storage","window","localStorage","API","get","then","response","data","Promise","resolve","reject","setItem","getItem","setHistory","dispatch","Response","Search","alert","Error","catch","err","connect","state","options","ItemCard","poster","year","isLiked","addProfileList","deleteProfileList","logo","tabIndex","timeIcon","toggleFunction","favoriteFillIcon","favoriteOutlineIcon","SliderSection","profileList","addList","addProfileListAC","slider","loading","setLoading","buttonFunction","sliderBlock","scrollSize","clientWidth","currentTarget","getAttribute","scrollBy","left","top","behavior","useEffect","scrollTo","right","onScroll","scrollWidth","scrollLeft","setTimeout","map","item","Title","Poster","Year","find","profileItem","key","profile","ProfileListItem","isHistory","isFavorite","ProfileSection","setProfileName","clearProfileHistory","clearProfileList","settingsModal","historyModal","listModal","inputValue","setInputValue","toggleModal","contains","closest","avatar","settingsIcon","historyIcon","listIcon","length","index","getProfileName","getProfileList","JSON","parse","getProfileHistory","setProfileList","stringify","setProfileHistory","path","SearchSectionContainer","SliderSectionContainer","ProfileSectionContainer","initialState","store","createStore","action","filter","applyMiddleware","thunk","Boolean","location","hostname","match","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.0c6d43c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1ae09dda.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendar.17b75e4d.svg\";","module.exports = __webpack_public_path__ + \"static/media/favorite_outline.bd6008c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/favorite_fill.e246b4e3.svg\";","module.exports = __webpack_public_path__ + \"static/media/left.1caaef75.svg\";","module.exports = __webpack_public_path__ + \"static/media/right.9a9e9d18.svg\";","module.exports = __webpack_public_path__ + \"static/media/face.9f965a85.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings_white.5b0cc761.svg\";","module.exports = __webpack_public_path__ + \"static/media/history.dd742d74.svg\";","module.exports = __webpack_public_path__ + \"static/media/list.654fd082.svg\";","import React from 'react'\r\nimport './Container.scss'\r\n\r\nconst Container = ({ children }) => {\r\n    return (\r\n        <div className='container'>{children}</div>\r\n    )\r\n}\r\n\r\nexport default Container","import React, { useRef } from 'react'\r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport Container from '../Container/Container'\r\nimport './Header.scss'\r\n\r\nconst Header = ({ icon, title }) => {\r\n\r\n    const nav = useRef(null)\r\n    const burger = useRef(null)\r\n\r\n    const toggleMenu = () => {\r\n        burger.current.classList.toggle('header__burger_open')\r\n        nav.current.classList.toggle('header__nav_open')\r\n    }\r\n\r\n    const closeleMenu = () => {\r\n        burger.current.classList.remove('header__burger_open')\r\n        nav.current.classList.remove('header__nav_open')\r\n    }\r\n\r\n    return (\r\n        <header className='header'>\r\n            <Container>\r\n                <Link to='/' className='button button_large header__main' onClick={closeleMenu}>\r\n                    <img src={icon} alt='logo' />\r\n                    <span>{title}</span>\r\n                </Link>\r\n                <nav className='header__nav' ref={nav}>\r\n                    <NavLink exact to='/' className='button' activeClassName='button_selected' onClick={closeleMenu}>\r\n                        Search\r\n                    </NavLink>\r\n                    <NavLink to='/profile' className='button' activeClassName='button_selected' onClick={closeleMenu}>\r\n                        Profile\r\n                    </NavLink>\r\n                </nav>\r\n                <span className='header__burger' ref={burger} onClick={toggleMenu} />\r\n            </Container>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import {\r\n    SET_TITLE, SET_TYPE, SET_PAGE, SET_LIST, ADD_LIST,\r\n    SET_PROFILE_NAME, SET_PROFILE_LIST, ADD_PROFILE_LIST, DELETE_PROFILE_LIST, SET_PROFILE_HISTORY, ADD_PROFILE_HISTORY\r\n} from './actionTypes'\r\n\r\nexport const setTitle = (title) => ({ type: SET_TITLE, title })\r\nexport const setType = (searchType) => ({ type: SET_TYPE, searchType })\r\nexport const setPage = (page) => ({ type: SET_PAGE, page })\r\nexport const setList = (list) => ({ type: SET_LIST, list })\r\nexport const addList = (list) => ({ type: ADD_LIST, list })\r\nexport const setProfileNameAC = (name) => ({ type: SET_PROFILE_NAME, name })\r\nexport const setProfileListAC = (list) => ({ type: SET_PROFILE_LIST, list })\r\nexport const addProfileListAC = (list) => ({ type: ADD_PROFILE_LIST, list })\r\nexport const deleteProfileListAC = (imdbID) => ({ type: DELETE_PROFILE_LIST, imdbID })\r\nexport const setProfileHistoryAC = (history) => ({ type: SET_PROFILE_HISTORY, history })\r\nexport const addProfileHistoryAC = (history) => ({ type: ADD_PROFILE_HISTORY, history })","export const SET_TITLE = 'SET_TITLE'\r\nexport const SET_TYPE = 'SET_TYPE'\r\nexport const SET_PAGE = 'SET_PAGE'\r\nexport const SET_LIST = 'SET_LIST'\r\nexport const ADD_LIST = 'ADD_LIST'\r\nexport const SET_PROFILE_NAME = 'SET_PROFILE_NAME'\r\nexport const SET_PROFILE_LIST = 'SET_PROFILE_LIST'\r\nexport const ADD_PROFILE_LIST = 'ADD_PROFILE_LIST'\r\nexport const DELETE_PROFILE_LIST = 'DELETE_PROFILE_LIST'\r\nexport const SET_PROFILE_HISTORY = 'SET_PROFILE_HISTORY'\r\nexport const ADD_PROFILE_HISTORY = 'ADD_PROFILE_HISTORY'","import React from 'react'\r\nimport './Button.scss'\r\n\r\nconst Button = ({ className, id, children, onClick }) => {\r\n    return (\r\n        <button className={`button ${className ? className : ''}`} onClick={onClick} id={id}>{children}</button>\r\n    )\r\n}\r\n\r\nexport default Button","import React from 'react'\r\nimport './Input.scss'\r\n\r\nconst Input = ({ value, type, onChange }) => {\r\n\r\n    const onSetTitle = (e) => {\r\n        onChange(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <input className='input' type={type} value={value} onChange={onSetTitle} />\r\n    )\r\n}\r\n\r\nexport default Input","import React, { useState } from 'react'\r\nimport Container from '../Container/Container';\r\nimport Button from '../Button/Button'\r\nimport Input from '../Input/Input'\r\nimport './SearchSection.scss'\r\n\r\nconst SearchSection = ({ title, type, list, getList }) => {\r\n\r\n    const [localTitle, setLocalTitle] = useState(title)\r\n    const [localType, setLocalType] = useState(type)\r\n\r\n    const onGetList = () => {\r\n        if (localTitle !== title || localType !== type) {\r\n            getList(localTitle, localType)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section className='search'>\r\n            <Container>\r\n                <div className={`search__block ${!list ? 'search__block_middle' : ''}`}>\r\n                    <Input value={localTitle} type='search' onChange={setLocalTitle} />\r\n                    <select className='select' defaultValue={localType} onChange={e => setLocalType(e.target.value)}>\r\n                        <option value='movie'>Movie</option>\r\n                        <option value='series'>Series</option>\r\n                    </select>\r\n                    <Button onClick={onGetList}>Search</Button>\r\n                </div>\r\n            </Container>\r\n        </section >\r\n    )\r\n}\r\n\r\nexport default SearchSection","import Axios from \"axios\"\r\n\r\nconst key = 'dfdae3d4'\r\n\r\nconst instance = Axios.create({\r\n    baseURL: `https://www.omdbapi.com/`\r\n})\r\n\r\nconst storage = window.localStorage\r\n\r\nexport const API = {\r\n    getList(title, type, page) {\r\n        return instance.get(`?apikey=${key}&s=${title}&type=${type}&page=${page}`).then(response => response.data)\r\n    },\r\n\r\n    setLocalName(name) {\r\n        return new Promise(function (resolve, reject) {\r\n            storage.setItem('name', name)\r\n            resolve(name)\r\n        })\r\n    },\r\n\r\n    getLocalName() {\r\n        return new Promise(function (resolve, reject) {\r\n            let name = storage.getItem('name')\r\n            if (!name) name = 'User'\r\n            resolve(name)\r\n        })\r\n    },\r\n\r\n    setLocalList(list) {\r\n        return new Promise(function (resolve, reject) {\r\n            storage.setItem('list', list)\r\n            resolve(list)\r\n        })\r\n    },\r\n\r\n    getLocalList() {\r\n        return new Promise(function (resolve, reject) {\r\n            let list = storage.getItem('list')\r\n            resolve(list)\r\n        })\r\n    },\r\n\r\n    clearLocalList() {\r\n        return new Promise(function (resolve, reject) {\r\n            storage.setItem('list', '')\r\n            resolve('')\r\n        })\r\n    },\r\n\r\n    setLocalHistory(history) {\r\n        return new Promise(function (resolve, reject) {\r\n            storage.setItem('history', history)\r\n            resolve(history)\r\n        })\r\n    },\r\n\r\n    getLocalHistory() {\r\n        return new Promise(function (resolve, reject) {\r\n            let history = storage.getItem('history')\r\n            resolve(history)\r\n        })\r\n    },\r\n\r\n    clearLocalHistory() {\r\n        return new Promise(function (resolve, reject) {\r\n            storage.setItem('history', '')\r\n            resolve('')\r\n        })\r\n    },\r\n}","import { API } from \"./api\"\r\nimport { setTitle, setType, setPage, setList, addList as addListAC, setProfileNameAC, setProfileHistoryAC, setProfileListAC, addProfileHistoryAC } from \"./actionCreators\"\r\n\r\nexport const getList = (title, type, page = 1, setHistory = true) => (dispatch) => {\r\n    if (!title) return\r\n    API.getList(title, type, page)\r\n        .then(data => {\r\n            if (data.Response === 'False') {\r\n                alert(data.Error)\r\n                return\r\n            }\r\n            dispatch(setTitle(title))\r\n            dispatch(setType(type))\r\n            dispatch(setPage(page))\r\n            dispatch(setList(data.Search))\r\n        })\r\n        .then(data => {\r\n            if (setHistory) {\r\n                dispatch(addProfileHistoryAC({ title, type }))\r\n            }\r\n        })\r\n        .catch(err => alert('thunks error:', err))\r\n}\r\n\r\nexport const addList = (title, type, page) => (dispatch) => {\r\n    API.getList(title, type, page)\r\n        .then(data => {\r\n            if (data.Response === 'False') {\r\n                alert(data.Error)\r\n                return\r\n            }\r\n            dispatch(addListAC(data.Search))\r\n        })\r\n        .catch(err => alert('thunks error:', err))\r\n}\r\n\r\nexport const setProfileName = (name) => (dispatch) => {\r\n    API.setLocalName(name)\r\n        .then(data => dispatch(setProfileNameAC(data)))\r\n        .catch(err => alert('thunks error:', err))\r\n}\r\n\r\nexport const getProfileName = () => (dispatch) => {\r\n    API.getLocalName()\r\n        .then(data => dispatch(setProfileNameAC(data)))\r\n        .catch(err => alert('thunks error:', err))\r\n}\r\n\r\nexport const setProfileList = (list) => (dispatch) => {\r\n    API.setLocalList(JSON.stringify(list))\r\n        .catch(err => alert('thunks error:', err))\r\n}\r\n\r\nexport const getProfileList = () => (dispatch) => {\r\n    API.getLocalList()\r\n        .then(data => {\r\n            if (data) dispatch(setProfileListAC(JSON.parse(data)))\r\n        })\r\n        .catch(err => alert('thunks error:', err))\r\n}\r\n\r\nexport const clearProfileList = () => (dispatch) => {\r\n    API.clearLocalList()\r\n        .then(data => dispatch(setProfileListAC(data)))\r\n        .catch(err => alert('thunks error:', err))\r\n}\r\n\r\nexport const setProfileHistory = (history) => (dispatch) => {\r\n    API.setLocalHistory(JSON.stringify(history))\r\n        .catch(err => alert('thunks error:', err))\r\n}\r\n\r\nexport const getProfileHistory = () => (dispatch) => {\r\n    API.getLocalHistory()\r\n        .then(data => {\r\n            if (data) dispatch(setProfileHistoryAC(JSON.parse(data)))\r\n        }).catch(err => alert('thunks error:', err))\r\n}\r\n\r\nexport const clearProfileHistory = () => (dispatch) => {\r\n    API.clearLocalHistory()\r\n        .then(data => dispatch(setProfileHistoryAC(data)))\r\n        .catch(err => alert('thunks error:', err))\r\n}","import { connect } from 'react-redux'\r\nimport { setTitle, setList, setType, setPage, addProfileHistoryAC } from '../../state/actionCreators'\r\nimport SearchSection from './SearchSection'\r\nimport { getList } from '../../state/thunks'\r\n\r\nconst mapStateToProps = (state) => ({\r\n    title: state.options.title,\r\n    type: state.options.type,\r\n    page: state.options.page,\r\n    list: state.data.list\r\n})\r\n\r\nexport default connect(mapStateToProps, { setTitle, setType, setPage, setList, getList, addProfileHistoryAC })(SearchSection)","import React from 'react'\r\nimport Button from '../Button/Button'\r\nimport timeIcon from '../../assets/icons/calendar.svg'\r\nimport favoriteOutlineIcon from '../../assets/icons/favorite_outline.svg'\r\nimport favoriteFillIcon from '../../assets/icons/favorite_fill.svg'\r\nimport logo from '../../assets/icons/logo.svg'\r\nimport './ItemCard.scss'\r\n\r\nconst ItemCard = ({ title, poster, year, imdbID, isLiked, addProfileList, deleteProfileList }) => {\r\n\r\n    const toggleFunction = (e, isLiked) => {\r\n        if (!isLiked) {\r\n            addProfileList({ title, year, poster, imdbID })\r\n        } else {\r\n            deleteProfileList(imdbID)\r\n        }\r\n    }\r\n\r\n    if (poster === 'N/A') poster = logo\r\n\r\n    return (\r\n        <div className='card' tabIndex='0'>\r\n            <img src={poster} alt={title} className='card__poster' />\r\n            <div className='card__field'>\r\n                <h2 className='card__title'>{title}</h2>\r\n                <span className='card__year'><img src={timeIcon} alt='runtime' className='card__icon' />{year}</span>\r\n            </div>\r\n            <Button className='button_medium' onClick={e => toggleFunction(e, isLiked)}>\r\n                <img src={isLiked ? favoriteFillIcon : favoriteOutlineIcon} alt='icon' />\r\n                <span>{!isLiked ? 'Like it!' : 'Liked'}</span>\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ItemCard","import React, { useEffect, useRef, useState } from 'react'\r\nimport Container from '../Container/Container'\r\nimport Button from '../Button/Button'\r\nimport ItemCard from '../ItemCard/ItemCard'\r\nimport left from '../../assets/icons/left.svg'\r\nimport right from '../../assets/icons/right.svg'\r\nimport './SliderSection.scss'\r\n\r\nconst SliderSection = ({ title, type, page, list, profileList, setPage, addList, addProfileListAC, deleteProfileListAC }) => {\r\n\r\n    const slider = useRef(null)\r\n\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const buttonFunction = (e) => {\r\n        const sliderBlock = slider.current\r\n        let scrollSize = sliderBlock.clientWidth\r\n        if (e.currentTarget.getAttribute('id') === 'prev') scrollSize = -scrollSize\r\n        sliderBlock.scrollBy({ left: scrollSize, top: 0, behavior: \"smooth\" })\r\n    }\r\n\r\n    const setPageFunction = () => {\r\n        if (slider.current.scrollWidth - (slider.current.scrollLeft + slider.current.clientWidth) < slider.current.clientWidth && !loading) {\r\n            setLoading(true)\r\n            setPage(page + 1)\r\n            addList(title, type, page + 1)\r\n            setTimeout(() => setLoading(false), 3000)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const sliderBlock = slider.current\r\n        sliderBlock.scrollTo({ left: 0, top: 0, behavior: \"smooth\" })\r\n    }, [title, type])\r\n\r\n    return (\r\n        <section className={`slider ${!list ? 'slider_hidden' : ''}`}>\r\n            <Container>\r\n                <div className='slider__block'>\r\n                    <div className='slider__navigation'>\r\n                        <Button className='slider__button' id='prev' onClick={buttonFunction}>\r\n                            <img className='header__icon' src={left} alt='logo' />\r\n                            <span className='header__title'>Prev</span>\r\n                        </Button>\r\n                        <Button className='slider__button' id='next' onClick={buttonFunction}>\r\n                            <span className='header__title'>Next</span>\r\n                            <img className='header__icon' src={right} alt='logo' />\r\n                        </Button>\r\n                    </div>\r\n                    <div className=\"slider__carousel\" ref={slider} onScroll={setPageFunction}>\r\n                        {list && list.map(item => (\r\n                            <ItemCard\r\n                                title={item.Title}\r\n                                poster={item.Poster}\r\n                                year={item.Year}\r\n                                imdbID={item.imdbID}\r\n                                isLiked={profileList && profileList.find(profileItem => profileItem.imdbID === item.imdbID)}\r\n                                addProfileList={addProfileListAC}\r\n                                deleteProfileList={deleteProfileListAC}\r\n                                key={`${item.Title}-${item.Year}`} />\r\n                        )\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default SliderSection","import { connect } from 'react-redux'\r\nimport SliderSection from './SliderSection'\r\nimport { addList } from '../../state/thunks'\r\nimport { setPage, addProfileListAC, deleteProfileListAC } from '../../state/actionCreators'\r\n\r\nconst mapStateToProps = (state) => ({\r\n    title: state.options.title,\r\n    type: state.options.type,\r\n    page: state.options.page,\r\n    list: state.data.list,\r\n    profileList: state.profile.list\r\n})\r\n\r\nexport default connect(mapStateToProps, { setPage, addList, addProfileListAC, deleteProfileListAC })(SliderSection)","import React from 'react'\r\nimport './ProfileListItem.scss'\r\nimport Button from '../Button/Button'\r\n\r\nconst ProfileListItem = ({ title, type, poster, imdbID, getList, deleteProfileList, isHistory, isFavorite }) => {\r\n    return (\r\n        <li className='list-item'>\r\n            {isFavorite && <img src={poster} alt='poster' className='list-item__poster' />}\r\n            <span className='list-item__title'>{title}{type && ` (${type})`}</span>\r\n            {isHistory && <Button className='button_outlined' onClick={e => getList(title, type, 1, false)}>Search</Button>}\r\n            {isFavorite && <Button className='button_outlined' onClick={e => deleteProfileList(imdbID)}>Delete</Button>}\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ProfileListItem","import React, { useRef, useState, useEffect } from 'react'\r\nimport Container from '../Container/Container'\r\nimport Button from '../Button/Button'\r\nimport Input from '../Input/Input'\r\nimport ProfileListItem from '../ProfileListItem/ProfileListItem'\r\nimport './ProfileSection.scss'\r\nimport avatar from '../../assets/icons/face.svg'\r\nimport settingsIcon from '../../assets/icons/settings_white.svg'\r\nimport historyIcon from '../../assets/icons/history.svg'\r\nimport listIcon from '../../assets/icons/list.svg'\r\n\r\nconst ProfileSection = ({ name, history, list, setProfileName, clearProfileHistory, clearProfileList, getList, deleteProfileListAC }) => {\r\n\r\n    const settingsModal = useRef(null)\r\n    const historyModal = useRef(null)\r\n    const listModal = useRef(null)\r\n    const [inputValue, setInputValue] = useState(name)\r\n\r\n    useEffect(() => {\r\n        setInputValue(name)\r\n    }, [name])\r\n\r\n    const toggleModal = (e) => {\r\n        if (e.target.classList.contains('settings') || e.target.closest('#settings-button')) settingsModal.current.classList.toggle('modal_open')\r\n        if (e.target.classList.contains('history') || e.target.closest('#history-button')) historyModal.current.classList.toggle('modal_open')\r\n        if (e.target.classList.contains('list') || e.target.closest('#list-button')) listModal.current.classList.toggle('modal_open')\r\n        if (e.target.closest('#settings-button-close')) settingsModal.current.classList.remove('modal_open')\r\n        if (e.target.closest('#history-button-close')) historyModal.current.classList.remove('modal_open')\r\n        if (e.target.closest('#list-button-close')) listModal.current.classList.remove('modal_open')\r\n    }\r\n\r\n    return (\r\n        <section className='profile'>\r\n            <Container>\r\n                <div className='profile__block'>\r\n                    <div className='userinfo'>\r\n                        <img alt='avatar' src={avatar} className='userinfo__avatar' />\r\n                        <h1 className='userinfo__username'>{name}</h1>\r\n                        <Button className='button_medium' id='settings-button' onClick={toggleModal}>\r\n                            <img src={settingsIcon} alt='icon' />\r\n                            <span>Settings</span>\r\n                        </Button>\r\n                        <Button className='button_medium' id='history-button' onClick={toggleModal}>\r\n                            <img src={historyIcon} alt='icon' />\r\n                            <span>History</span>\r\n                        </Button>\r\n                        <Button className='button_medium' id='list-button' onClick={toggleModal}>\r\n                            <img src={listIcon} alt='icon' />\r\n                            <span>My list</span>\r\n                        </Button>\r\n                    </div>\r\n                    <div className='modal settings' ref={settingsModal} onClick={toggleModal}>\r\n                        <div className='modal__content'>\r\n                            <span className='modal__info'>\r\n                                Username:\r\n                            </span>\r\n                            <div className='modal__panel'>\r\n                                <Input type='text' value={inputValue} onChange={setInputValue} />\r\n                                <Button className='button_outlined' onClick={e => setProfileName(inputValue)}>Save</Button>\r\n                            </div>\r\n                            <div className='modal__panel'>\r\n                                <Button className='button_outlined' onClick={e => clearProfileHistory()}>Clear history</Button>\r\n                                <Button className='button_outlined' onClick={e => clearProfileList()}>Clear list</Button>\r\n                            </div>\r\n                            <div className='modal__panel'>\r\n                                <Button id='settings-button-close' onClick={toggleModal}>Okay</Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='modal history' ref={historyModal} onClick={toggleModal}>\r\n                        <div className='modal__content'>\r\n                            <span className='modal__info'>\r\n                                Your history:\r\n                            </span>\r\n                            <ul className='modal__list'>\r\n                                {history && history.length ? history.map((item, index) => <ProfileListItem key={`${item.title}(${index})`} title={item.title} type={item.type} getList={getList} isHistory />) : 'Your history is empty'}\r\n                            </ul>\r\n                            <div className='modal__panel'>\r\n                                <Button id='history-button-close' onClick={toggleModal}>Okay</Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='modal list' ref={listModal} onClick={toggleModal}>\r\n                        <div className='modal__content'>\r\n                            <span className='modal__info'>\r\n                                Your list:\r\n                            </span>\r\n                            <ul className='modal__list'>\r\n                                {list && list.length ? list.map((item, index) => <ProfileListItem key={`${item.title}(${index})`} title={item.title} poster={item.poster} imdbID={item.imdbID} deleteProfileList={deleteProfileListAC} isFavorite />) : 'Your list is empty'}\r\n\r\n                            </ul>\r\n                            <div className='modal__panel'>\r\n                                <Button id='list-button-close' onClick={toggleModal}>Okay</Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ProfileSection","import { connect } from 'react-redux'\r\nimport ProfileSection from './ProfileSection'\r\nimport { setProfileName, clearProfileHistory, clearProfileList, getList } from '../../state/thunks'\r\nimport { deleteProfileListAC } from '../../state/actionCreators'\r\n\r\nconst mapStateToProps = (state) => ({\r\n    name: state.profile.name,\r\n    list: state.profile.list,\r\n    history: state.profile.history\r\n})\r\n\r\nexport default connect(mapStateToProps, { setProfileName, clearProfileHistory, clearProfileList, getList, deleteProfileListAC })(ProfileSection)","import React, { useEffect } from 'react'\r\nimport { Route } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport Header from './components/Header/Header'\r\nimport SearchSectionContainer from './components/SearchSection/SearchSectionContainer'\r\nimport SliderSectionContainer from './components/SliderSection/SliderSectionContainer'\r\nimport ProfileSectionContainer from './components/ProfileSection/ProfileSectionContainer'\r\nimport { getProfileName, getProfileList, getProfileHistory, setProfileHistory, setProfileList } from './state/thunks'\r\nimport logo from './assets/icons/logo.svg'\r\n\r\n\r\nfunction App({ getProfileName, getProfileList, getProfileHistory, setProfileList, setProfileHistory, list, history }) {\r\n\r\n  useEffect(() => {\r\n    getProfileName()\r\n    getProfileList()\r\n    getProfileHistory()\r\n  }, [getProfileName, getProfileList, getProfileHistory])\r\n\r\n  useEffect(() => {\r\n    if (list && list.length) setProfileList(list)\r\n  }, [list, setProfileList])\r\n\r\n  useEffect(() => {\r\n    if (history && history.length) setProfileHistory(history)\r\n  }, [history, setProfileHistory])\r\n\r\n\r\n  return (\r\n    <>\r\n      <Header icon={logo} title='Movie App' />\r\n      <Route exact path='/'>\r\n        <SearchSectionContainer />\r\n        <SliderSectionContainer />\r\n      </Route>\r\n      <Route path='/profile'>\r\n        <ProfileSectionContainer />\r\n      </Route>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  name: state.profile.name,\r\n  list: state.profile.list,\r\n  history: state.profile.history\r\n})\r\n\r\nexport default connect(mapStateToProps, { getProfileName, getProfileList, getProfileHistory, setProfileList, setProfileHistory })(App);","import {\r\n    SET_TITLE, SET_TYPE, SET_PAGE, SET_LIST, ADD_LIST,\r\n    SET_PROFILE_NAME, SET_PROFILE_LIST, ADD_PROFILE_LIST, DELETE_PROFILE_LIST, SET_PROFILE_HISTORY, ADD_PROFILE_HISTORY\r\n} from './actionTypes'\r\n\r\nconst initialState = {\r\n    options: {\r\n        title: '',\r\n        type: 'movie',\r\n        page: 1,\r\n    },\r\n    data: {\r\n        list: null\r\n    },\r\n    profile: {\r\n        name: 'User',\r\n        list: [],\r\n        history: []\r\n    }\r\n}\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TITLE:\r\n            return {\r\n                ...state,\r\n                options: {\r\n                    ...state.options,\r\n                    title: action.title\r\n                }\r\n            }\r\n\r\n        case SET_TYPE:\r\n            return {\r\n                ...state,\r\n                options: {\r\n                    ...state.options,\r\n                    type: action.searchType\r\n                }\r\n            }\r\n\r\n\r\n        case SET_PAGE:\r\n            return {\r\n                ...state,\r\n                options: {\r\n                    ...state.options,\r\n                    page: action.page\r\n                }\r\n            }\r\n\r\n        case SET_LIST:\r\n            return {\r\n                ...state,\r\n                data: {\r\n                    ...state.data,\r\n                    list: action.list\r\n                }\r\n            }\r\n\r\n        case ADD_LIST:\r\n            return {\r\n                ...state,\r\n                data: {\r\n                    ...state.data,\r\n                    list: [...state.data.list, ...action.list]\r\n                }\r\n            }\r\n\r\n        case SET_PROFILE_NAME:\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    name: action.name\r\n                }\r\n            }\r\n\r\n        case SET_PROFILE_LIST:\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    list: action.list\r\n                }\r\n            }\r\n\r\n        case ADD_PROFILE_LIST:\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    list: [...state.profile.list, action.list]\r\n                }\r\n            }\r\n\r\n        case DELETE_PROFILE_LIST:\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    list: [...state.profile.list.filter(item => item.imdbID !== action.imdbID)]\r\n                }\r\n            }\r\n\r\n        case SET_PROFILE_HISTORY:\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    history: action.history\r\n                }\r\n            }\r\n\r\n        case ADD_PROFILE_HISTORY:\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    history: [...state.profile.history, action.history]\r\n                }\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { appReducer } from './reducer'\r\n\r\nexport const store = createStore(appReducer, applyMiddleware(thunk))\r\nwindow.store = store","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport { store } from './state/store'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.scss';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter basename='/movie-app'>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}